{"version":3,"sources":["scripts/slider.js"],"names":["slider","document","querySelector","sliderRow","firstSlide","buttonNext","buttonBack","navButtons","querySelectorAll","chaptersCounts","quantifyOfSlides","reduce","sum","elem","marginWidth","parseFloat","window","getComputedStyle","marginRight","cardWidth","offsetWidth","initSlider","onclick","fullWidth","currentPos","scrollLeft","Math","ceil","floor","chaptersPositions","i","length","push","onscroll","nearest","difference","Infinity","position","NaN","indexOfChapter","abs","control","checked","style","opacity","addEventListener","setTimeout"],"mappings":"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","file":"slider.f59c774c.js","sourceRoot":"../src","sourcesContent":["/* eslint-disable max-len */\n'use strict';\n\n// init elements\nconst slider = document.querySelector('.slider');\nconst sliderRow = document.querySelector('.slider__slides-row');\nconst firstSlide = document.querySelector('.slider__slide');\nconst buttonNext = document.querySelector('.shop__slides-navigation-button--next');\nconst buttonBack = document.querySelector('.shop__slides-navigation-button--back');\nconst navButtons = [...document.querySelectorAll('.slider-navigation-button')];\n\n// init data\nconst chaptersCounts = [3, 3, 3, 3]; // 4 for face, 4 for body, 4 for ha...\n// you can change array above, but totally them should be 16 (like cards in html)\nconst quantifyOfSlides = chaptersCounts.reduce((sum, elem) => sum + elem);\nconst marginWidth = parseFloat(window.getComputedStyle(firstSlide).marginRight);\nlet cardWidth = (sliderRow.offsetWidth - marginWidth * (quantifyOfSlides - 1)) / quantifyOfSlides;\n\nconst initSlider = () => {\n  // arrow buttons logic\n  buttonNext.onclick = () => {\n    const fullWidth = (marginWidth + cardWidth);\n    const currentPos = slider.scrollLeft;\n\n    if (currentPos % fullWidth < 10 || fullWidth - (currentPos % fullWidth) < 10) {\n    /* if it is on straight place then go to next slide */\n      slider.scrollLeft = currentPos + fullWidth;\n    } else {\n    /* if slide is somewhere on middle then set it on straight position */\n      slider.scrollLeft = Math.ceil(currentPos / fullWidth) * fullWidth;\n    }\n  };\n\n  buttonBack.onclick = () => {\n    const fullWidth = (marginWidth + cardWidth);\n    const currentPos = slider.scrollLeft;\n\n    if (currentPos % fullWidth < 10 || fullWidth - (currentPos % fullWidth) < 10) {\n    /* if it is on straight place then go to next slide */\n      slider.scrollLeft = currentPos - fullWidth;\n    } else {\n    /* if slide is somewhere on middle then set it on straight position */\n      slider.scrollLeft = Math.floor(currentPos / fullWidth) * fullWidth;\n    }\n  };\n\n  // slider navigation logic\n  /* make array of proper breackpoints (scrollLeft values) for every chapter (button) */\n  const chaptersPositions = [0]; /* first chapter position is everytime scrollLeft === 0 */\n\n  for (let i = 0; i < chaptersCounts.length - 1; i++) {\n    chaptersPositions.push(chaptersPositions[i] + chaptersCounts[i] * (cardWidth + marginWidth));\n  }\n\n  /* set listeners on each button. Each listener will set on appropriate scroll position */\n  for (let i = 0; i < navButtons.length; i++) {\n    navButtons[i].onclick = () => {\n      slider.scrollLeft = chaptersPositions[i];\n    };\n  }\n\n  /* it will change active chapter button depended of appropriate scroll position */\n  slider.onscroll = () => {\n    const nearest = {\n      difference: Infinity,\n      position: NaN,\n      indexOfChapter: null,\n    };\n\n    /* it calculates nearest chapter of current scroll position */\n    for (let i = 0; i < chaptersPositions.length; i++) {\n      if (Math.abs(chaptersPositions[i] - slider.scrollLeft) < nearest.difference) {\n        nearest.difference = Math.abs(chaptersPositions[i] - slider.scrollLeft);\n        nearest.position = chaptersPositions[i];\n        nearest.indexOfChapter = i;\n      }\n    }\n\n    /* this activate proper (nearest) chapters button */\n    navButtons[nearest.indexOfChapter].control.checked = true;\n\n    /* this activate or deactivate arrow buttons if there space to scroll or not */\n    if (slider.scrollLeft === 0) {\n      buttonBack.style.opacity = '0.3';\n    } else if ((slider.scrollLeft + slider.offsetWidth) >= sliderRow.offsetWidth) {\n      buttonNext.style.opacity = '0.3';\n    } else {\n      buttonNext.style.opacity = buttonBack.style.opacity = '1';\n    }\n  };\n};\n\ninitSlider();\n\n// when window sizes changes, then card sizes changes too\nwindow.addEventListener('resize', () => {\n  setTimeout(() => {\n    cardWidth = (sliderRow.offsetWidth - marginWidth * (quantifyOfSlides - 1)) / quantifyOfSlides;\n    initSlider();\n  }, 1000); /* there are bug in browser, sometimes it dont update card.offsetWidth in time */\n});\n\n// menu closing\n"]}